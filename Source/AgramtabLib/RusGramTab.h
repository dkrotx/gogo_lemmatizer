// ==========  This file is under  LGPL, the GNU Lesser General Public Licence
// ==========  Dialing Lemmatizer (www.aot.ru)
// ==========  Copyright by Alexey Sokirko

#ifndef __RUSGRAMTAB_H_
#define __RUSGRAMTAB_H_


#include "agramtab_.h"       
#include "rus_consts.h"       

/////////////////////////////////////////////////////////////////////////////

const unsigned int  StartUp =  0xC0E0; //Àà 
const unsigned int  EndUp = 0x10000;  //ÿÿ
const unsigned int MaxGrmCount  = EndUp -StartUp; // // 16159  (16 Êá) 
const BYTE rPartOfSpeechCount = 22;
// íå äîëæíî áûòü ïðîáåëîâ ìåæäó ñëîâàìè 
const char rPartOfSpeeches[rPartOfSpeechCount][20] = 
{	"Ñ",  // 0
	"Ï", // 1
	"Ã", // 2
	"ÌÑ", // 3
	"ÌÑ-Ï", // 4
	"ÌÑ-ÏÐÅÄÊ", // 5
	"×ÈÑË", // 6
	"×ÈÑË-Ï", // 7
	"Í", // 8
	"ÏÐÅÄÊ", //9 
	"ÏÐÅÄË", // 10
	"ÏÎÑË", // 11
	"ÑÎÞÇ", // 12
	"ÌÅÆÄ", // 13
	"ÂÂÎÄÍ",// 14
	"ÔÐÀÇ", // 15
	"×ÀÑÒ", // 16
	"ÊÐ_ÏÐÈË",  // 17
	"ÏÐÈ×ÀÑÒÈÅ", //18
	"ÄÅÅÏÐÈ×ÀÑÒÈÅ", //19
	"ÊÐ_ÏÐÈ×ÀÑÒÈÅ", // 20
	"ÈÍÔÈÍÈÒÈÂ"  //21
};

const short GrammemsCount = 43;
const char Grammems[GrammemsCount][10] = { 
					// 0..1
				   	"ìí","åä",
					// 2..7
					"èì","ðä","äò","âí","òâ","ïð",
					// ðîä 8-11
					"ìð","æð","ñð","ìð-æð",
					// 12
					"êð",
					// 13..15
					"íñò","áóä","ïðø",
					// 16..18
					"1ë","2ë","3ë",	
					// 19
					"ïâë",
					// 20..21
					"îä","íî",	
					// 22
					"ñðàâí",
					// 23..24
					"ñâ","íñ",	
					// 25..26
					"íï","ïå",
					// 27..28
					"äñò","ñòð",
					// 29-31
					"0", "àááð", "îò÷",
					// 32-33
					"ëîê", "îðã",
					// 34-35
					"êà÷", "äôñò",
					// 36-37 (íàðå÷èÿ)
					"âîïð", "îòíîñ",
					// 38..39
					"èìÿ","ôàì",
					// 40
					"áåçë",
					// 41,42
					"æàðã", "îï÷"
					};




const int rClauseTypesCount = 12;
const char rClauseTypes [rClauseTypesCount][30] = 
{
	"ÃË_ËÈ×Í", 
	"ÄÏÐ",
	"ÊÐ_ÏÐ×",
	"ÊÐ_ÏÐÈË",
	"ÏÐÅÄÊ",
	"ÏÐ×",	 
	"ÈÍÔ",	
	"ÂÂÎÄ",
	"ÒÈÐÅ",
	"ÍÑÎ",
	"ÑÐÀÂÍ",
	"ÊÎÏÓË"
};




class CRusGramTab : public CAgramtab{
	public:
	CAgramtabLine*  Lines[MaxGrmCount];
	CRusGramTab();
	~CRusGramTab();

    BYTE			GetPartOfSpeechesCount () const {return rPartOfSpeechCount;};
	const char*		GetPartOfSpeechStr(BYTE i) const {return rPartOfSpeeches[i];};
	size_t			GetGrammemsCount()  const {return GrammemsCount;};
	const char*		GetGrammemStr(size_t i) const {return Grammems[i];};
	bool			IsAdditionalGrammem (const char* s) const;

	size_t GetMaxGrmCount() const {return MaxGrmCount;}
	;
	CAgramtabLine*& GetLine(size_t LineNo) {return Lines[LineNo];}
	const CAgramtabLine* GetLine(size_t LineNo) const {return Lines[LineNo];}

	size_t s2i(const char * s )  const
	{ 
		return  (unsigned char) s[0]*0x100+(unsigned char) s[1] - StartUp;
	};

	string i2s(WORD i) const
	{ 
		i += StartUp;
		char res[3];

		res[0] = (i >> 8);
		res[1] = (0xFF & i);
		res[2] = 0;
		return  res;
	};

    bool  ProcessPOSAndGrammems (const char* tab_str, BYTE& PartOfSpeech,  QWORD& grammems) const;

	

	const char* GetRegistryString() const 
	{
		return "Software\\Dialing\\Lemmatizer\\Russian\\Rgramtab";
	};
	

	bool GleicheCase(const char* gram_code_noun, const char* gram_code_adj) const;
	bool GleicheCaseNumber(const char* gram_code1, const char* gram_code2) const;
	QWORD GleicheGenderNumberCase(const char* common_gram_code_noun, const char* gram_code_noun, const char* gram_code_adj) const;

	bool GleicheGenderNumber(const char* gram_code1, const char* gram_code2) const;
	bool GleicheSubjectPredicate(const char* gram_code1, const char* gram_code2) const;
	long GetClauseTypeByName(const char* TypeName) const;

	const char* GetClauseNameByType(long type) const;

	size_t GetClauseTypesCount() const 
	{
		return rClauseTypesCount;
	};
	bool IsStrongClauseRoot(const DWORD Poses) const;
	bool is_month (const char* lemma) const;
	bool is_small_number (const char* lemma) const;
	bool IsMorphNoun (int Poses)  const;
	bool is_morph_adj (int Poses) const;
	bool is_morph_participle (int Poses) const;
	bool is_morph_pronoun (int Poses) const;
	bool is_morph_pronoun_adjective(int Poses) const;
	bool is_left_noun_modifier  (int Poses, QWORD grammems) const;
	bool is_numeral (int poses) const;
	bool is_verb_form (int poses) const;
	bool is_infinitive(int poses) const;
	bool is_morph_predk(int poses) const;
	bool is_morph_adv(int poses) const;
	bool is_morph_article(int poses) const;
	bool is_morph_personal_pronoun (int poses, QWORD grammems) const;
	bool IsParticle(const char* lemma, int poses) const;
	bool IsSynNoun(int Poses, const char* Lemma) const;
	bool IsStandardParamAbbr (const char* WordStrUpper) const;
	BYTE	GetTagId(const char* gram_code) const;	
};


#endif //__RUSGRAMTAB_H_
